#!/usr/bin/env bash

# open folder if hx called with no arguments
hx() {
  if [[ $# -eq 0 ]]; then
    command hx .
  else
    command hx "$@"
  fi
}

goto-line() {
	local text_pattern="$1"
	local file="$2"
	hx $file:$(sed -n "/$text_pattern/{=;q;}" $file)
}

y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

begin-sesh() {
	tmux new-session -d -s sesh -c ~/notes -n "notes" 
	tmux new-window -t sesh -c ~/projects/td_mea -n "td_mea" 
	tmux new-window -t sesh -c ~/projects/sandjo -n "sandjo" 
	tmux new-window -t sesh -c ~/projects/ag-vs-rh -n "ag-rh" 
	tmux attach -c ~/projects
}

cpsc() {
	file="$(find ~/Pictures/ -maxdepth 1 -type f | sort -k1,1nr | tail -n 1 )"
	# echo $file
	cp $file $1
}

take() {
	local name=$1
	mkdir -p $name
	cd $name
}

cleantex() {
	rm *.log
	rm *.pdfsync
	rm *.aux
	rm *.bcf*
	rm *fdb*
	rm *fls
	rm *.out
	rm *sync*
	rm report.toc
}

# ditch the outputs of chemcraft
molv () {
	  if [[ $# -eq 0 ]]; then
			wine /home/vport/.wine/drive_c/Chemcraft/Chemcraft.exe
		else
	    for file in "$@"; do
	        wine /home/vport/.wine/drive_c/Chemcraft/Chemcraft.exe "$file" &> /dev/null &
	    done
		fi
}


# oneliner to optimize a structure with xtb without cluttering the current dir
xtbopt() {
    local file_name="$1"
    mkdir .xtbopt && cp "$file_name" .xtbopt && cd .xtbopt && xtb "$1" --opt && cp xtbopt.xyz .. && cd ..
    molv xtbopt.xyz
}

xtbhess() {
    local file_name="$1"
    local charge=""
    local base_name="${file_name%.*}"  # Remove extension
    
    # Check for --charge flag
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -c|--charge)
                charge="$2"
                shift 2  # Skip both --charge and its value
                ;;
            *)
                shift  # Skip other arguments
                ;;
        esac
    done

    mkdir -p .xtbhess
    cp "$file_name" .xtbhess/
    cd .xtbhess

    # Generate Hessian with or without charge
    if [[ -n "$charge" ]]; then
        gedent gen hessian "$file_name" --charge "$charge" --nprocs 8
    else
        gedent gen hessian "$file_name" --nprocs 8
    fi

    # Use base_name for job input and hess file
    job "${base_name}.inp"
    cp "${base_name}.hess" ..
    
    cd ..
}

checkneb() {
    local file_root="$1"
    env DISPLAY=:0 plot_interp_neb "$file_root.interp" &
    molv "$file_root""_MEP_trj.xyz"
}

# get the last frame of a trajectory
trj_to_xyz() {
  trj_file="$1"
  nratoms=$(head "$trj_file" -n 1)
  xyzlength=$((nratoms + 2))
  xyzfile="${trj_file/_trj/}"
  tail -n "$xyzlength" "$trj_file" > "$xyzfile"
}

## compchemstuff

geninit() {
	if [ $# -eq 0 ]
	then
		file="init.xyz"
	else
		file=$1
	fi
	wl-paste -t text | sed -r '/^\s*$/d' > $file
}

setup-irc() {
	mkdir ../irc
	cp init.xyz ../irc
	cp init.hess ../irc
	cd ../irc
	gedent gen irc init.xyz
}

setup-reactant() {
	local filename=$1
	local irc=$(pwd)
	mkdir ../react-freq -p
	cp $filename ../react-freq/init.xyz
	cd ../react-freq
	gedent gen optfreq init.xyz
	cd $irc
}

setup-product() {
	local filename=$1
	local irc=$(pwd)
	mkdir ../prod-freq -p
	cp $filename ../prod-freq/init.xyz
	cd ../prod-freq
	gedent gen optfreq init.xyz
	cd $irc
}

pqr() {
	if [[ "$HOST" == "pipeline" ]]; then
   local dir=$(pueue log -j | jq -r '
        to_entries[] |
        select(.value.task.status | has("Running")) |
        .value.task.path
    '| head -n 1)

    if [[ -n "$dir" ]]; then
        cd "$dir"
    else
        echo "No running task found" >&2
        return 1
    fi
	else
		cd $(ssh pipeline "pueue" | grep Running | awk '{print $5}')
	fi
}


pqd() {
	   local dir=$(pueue log -j | jq -r '
        to_entries[] |
        select(.value.task.status | has("Done")) |
        .value.task.path
    ' | fzf)

    if [[ -n "$dir" ]]; then
        cd "$dir" 
    else
        echo "No done tasks selected or found" >&2
        return 1
    fi
}

qspcd() {
	if [[ $# -eq 0 ]]; then
		cd $(ssh -t pipeline "pueue status -j" | jq '.tasks[].path' | tr -d '"' | fzf )
	else
		cd $(ssh pipeline "pueue log $1 -j " | jq ".[].[].path" 2>/dev/null | tr -d '"')
	fi

}

qsjcd() {
	  if [[ $# -eq 0 ]]; then
			cd $(qst f | jq '.[].pwd' | tr -d '"' | sed "s/scratch/home/" | fzf)
		else
			local number_of_jobs=$1
			cd $(qst f -n $number_of_jobs | jq '.[].pwd' | tr -d '"' | sed "s/scratch/home/" | fzf)
		fi
}

addpipejob() {
	local dir=$PWD
	cs pipeline push sync 
	ssh pipeline "cd $dir && pueue add -- /home/vport/projects/scripts/job init.inp"
}

# oneliner to send files and ssh to cluster
sngo() {
	local sync_flag=false
	local remote=$1

  # Check for --sync flag
  for arg in "$@"; do
    if [[ "$arg" == "--sync" ]]; then
      sync_flag=true
      shift  # Remove the flag from arguments
      break
    fi
  done

	if $sync_flag; then
		cs "$remote" push sync && sshcd "$remote"
	else
	  cs "$remote" push  && sshcd "$remote"
	fi
}


pl() {
	ssh pipeline "pueue status -j" | sed 's/\home\/vport\/projects\///' | jq '.tasks[] | {
  path: .path, 
  id: .id, 
  status: (
    if .status.Queued then "q"
    elif .status.Running then "r"
    elif .status.Done then "d"
    else null end
  )
}' | mlr --ijson --opprint cat

}
