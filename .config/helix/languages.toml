[[language]]
name = "latex"
language-servers = [ "scls", "texlab" , "ltex-ls-plus" ]

[language-server.texlab]
command = "texlab"

[language-server.texlab.config.texlab.build]
onSave = true
forwardSearchAfter = true
 executable = "latexmk"
 args = [
  "-pdf",
  "-interaction=nonstopmode",
  "-synctex=1",
  "-shell-escape",
  "%f"
  ]

[language-server.texlab.config.texlab.forwardSearch]
executable = "zathura"
args = [ "--synctex-forward", "%l:%c:%f", "%p" ]

[language-server.texlab.config.texlab.chktex]
onOpenAndSave = true
onEdit = true

# introduce new language server
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100           # set max completion results len for each group: words, snippets, unicode-input
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
snippets_first = true                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false        # enable "unicode input"
feature_paths = false                # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

[[language]]
name = "python"
language-servers = ["pyright", "ruff"]
auto-format = true
roots = [".", "pyproject.toml", "pyrightconfig.json"]
comment-token = "#"

[language-server.pyright]
command = "pyright-langserver"
args = ["--stdio"]

[language-server.pyright.config]
reportMissingTypeStubs = false

# https://github.com/helix-editor/helix/issues/1898#issuecomment-1627146829
[language-server.pyright.config.python.analysis]
typeCheckingMode = "basic"
autoImportCompletions = true

[language-server.ruff]
command = "ruff-lsp"

[language-server.ruff.config.settings]
args = ["--ignore", "E501"]

[language.formatter]
command = "black"
args = ["--line-length", "88", "--quiet", "-"]

# Haskell configuration

[[language]]
name = "haskell"
formatter = { command = "stylish-haskell", args = [] }
auto-format = true

[language-server.haskell-language-server]
command  = "haskell-language-server-wrapper"
args = ["--lsp"]

# Prettier (tested ones, see <https://github.com/helix-editor/helix/wiki/External-binary-formatter-configuration#prettier>)

[[language]]
name = "html"
formatter = { command = "prettier", args = ["--parser", "html"] }
auto-format = true

[[language]]
name = "css"
formatter = { command = "prettier", args = ["--parser", "css"] }
auto-format = true

# Prettier (untested ones, see above)

[[language]]
name = "scss"
formatter = { command = "prettier", args = ["--parser", "scss"] }
auto-format = true

[[language]]
name = "graphql"
formatter = { command = "prettier", args = ["--parser", "graphql"] }
auto-format = true

[[language]]
name = "yaml"
formatter = { command = "prettier", args = ["--parser", "yaml"] }
auto-format = true

# Prettier (untested ones, official plugins, see above)

[[language]]
name = "php"
formatter = { command = "prettier", args = ["--parser", "php"] }
auto-format = true

[[language]]
name = "ruby"
formatter = { command = "prettier", args = ["--parser", "ruby"] }
auto-format = true

[[language]]
name = "xml"
formatter = { command = "prettier", args = ["--parser", "xml"] }
auto-format = true

# Deno (tested ones, see <https://github.com/helix-editor/helix/wiki/External-binary-formatter-configuration#deno>)

[[language]]
name = "javascript"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "js" ] }
auto-format = true

[[language]]
name = "json"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "json" ] }
auto-format = true

[[language]]
name = "markdown"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "md" ] }
auto-format = true

[[language]]
name = "typescript"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "ts" ] }
auto-format = true

[[language]]
name = "jsx"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "jsx" ] }
auto-format = true

[[language]]
name = "tsx"
formatter = { command = 'deno', args = ["fmt", "-", "--ext", "tsx" ] }
auto-format = true
